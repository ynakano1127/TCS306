options {
  JDK_VERSION = "1.5";
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(Calc)

import java.io.*;
import java.util.ArrayList;
public class Calc
{
    private Env env = new Env();

    public static void main(String args [])
    {
        try {
            if (args.length == 0)
                new Calc(System.in).interactive();    // 対話モードへ
            else {
                Reader reader = new BufferedReader(new FileReader(new File(args[0])));
                Calc calc = new Calc(reader);
                calc.eval();
            }
        } catch (ParseException e) {
            System.err.println(e);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void interactive() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.print("> ");
            String input = "";
            while (true) {
                String line = reader.readLine();
                if (line == null) return;
                input += line;
                if (line.length() == 0 || input.charAt(input.length() - 1) != '\\')
                    break;
                input = input.substring(0, input.length() - 1);
	    }
            try {
                ReInit(new StringReader(input));
                eval();
            } catch (ParseException e) {
                System.err.println(e);
            }
        }
    }
}

PARSER_END(Calc)

SKIP : { < [" ", "\r", "\t", "\n"] > }

TOKEN : {
  < IF: "if">
  | < THEN: "then">
  | < ELSE: "else">
  | < WHILE: "while">
  | < DO : "do">
  | < END: "end">
  |  < INTEGER: (["0"-"9"])+ >
  | <IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

void eval() :
{
    Node root;
}
{
    (
        root = stmt()
        {
            System.out.println("tree: " + root);
            System.out.println("=>" + root.eval(env));
        }
    )*
    <EOF>
}

Node stmt() :
{
  Node n;
}
{
  ( n = simpleStmt() | n = ifStmt() | n = whileStmt() )
  { return n; }
}

Node ifStmt() :
{
  Token t;
  Node cond, thenBlock, elseBlock = null;
}
{
  t = <IF> cond = expr() <THEN> thenBlock = block() [<ELSE>  elseBlock = block()] <END>
  { return new IfNode(t.beginLine, cond, thenBlock, elseBlock); }
}

Node whileStmt() :
{
  Token t;
  Node cond, block;
}
{
  t = <WHILE>  cond = expr() <DO> block = block() <END>
  { return new WhileNode(t.beginLine, cond, block); }
}

Node block() :
{
  Node tmpNode;
  ArrayList<Node> nodes = new ArrayList<Node>();
}
{
  (
    tmpNode = stmt()
    { nodes.add(tmpNode); }
  )*
  { return new BlockNode(nodes); }
}

Node simpleStmt() :
{
  Node n;
}
{
    n = expr() ";"
    { return n; }
}

Node expr() :
{
    NameNode n;
    Node x;
}
{
    LOOKAHEAD(2) n = name() "=" x = expr()
     {
        return new AssignNode(n.line(), n, x);
    } | x = orExpr() { return x; }
}

Node orExpr() :
{
    Token t;
    Node x, y;
}{
    x = andExpr() (
        t = "||" y = andExpr()
        { x = new BinExprNode(t.beginLine, x, t.image, y); }
    )*
    { return x; }
}

Node andExpr() :
{
    Token t;
    Node x, y;
}{
    x = compExpr() (
        t = "&&" y = compExpr()
        { x = new BinExprNode(t.beginLine, x, t.image, y); }
    )*
    { return x; }
}

Node compExpr() :
{
    Token t;
    Node x, y;
 }{
    x = numExpr() [
        (
            t = ">" |
            t = "<" |
            t = "<=" |
            t = ">=" |
            t = "==" |
            t = "!="
        ) y = numExpr()
        { x = new BinExprNode(t.beginLine, x, t.image, y); }
    ]
    { return x; }
}

Node numExpr() :
{
    Token t;
    Node x, y;
}
{
    x = term() (
        (t = "+" | t = "-")  y = term()
        { x = new BinExprNode(t.beginLine, x, t.image, y); }
    )*
    { return x; }
}

Node term() :
{
    Token t;
    Node x, y;
}
{
    x = factor() (
        ( t = "*" | t = "/" | t = "%" ) y = factor()
        { x = new BinExprNode(t.beginLine, x, t.image, y); }
    )*
    { return x; }
}

Node factor() :
{
    Token t;
    Node x;
}
{
    (
        x = element()
    | (
        "(" x = expr() ")"
    ) | (
        t = "+" x = factor()
        { x = new PosExprNode(t.beginLine, x); }
    ) | (
        t = "-" x = factor()
        { x = new NegExprNode(t.beginLine, x); }
    ))
    { return x; }
}

Node element() :
{
    Node n;
}
{
    n = number()
    { return n; }
    | n = name()
    { return n; }
}

Node number() : { Token n; }
{
    n = < INTEGER > { return new NumberNode(n.beginLine, Integer.parseInt(n.image)); }
}

NameNode name() : { Token s; }
{
    s = < IDENTIFIER> { return new NameNode(s.beginLine, s.image); }
}